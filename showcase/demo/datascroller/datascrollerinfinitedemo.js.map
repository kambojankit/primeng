{"version":3,"file":"datascrollerinfinitedemo.js","sourceRoot":"","sources":["datascrollerinfinitedemo.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA+C;AAE/C,oDAAiD;AAgBjD,IAAa,wBAAwB;IAMjC,kCAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAF1C,SAAI,GAAc,EAAE,CAAC;IAEyB,CAAC;IAE/C,2CAAQ,GAAR,UAAS,KAAK;QAAd,iBAcC;QAbG,YAAY;QACZ,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,IAAI,GAAG,IAAI,EAAhB,CAAgB,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,CAAC,CAAC;YACF,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAClC,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC;YACD,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;YACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAC,MAAM,EAAE,OAAO,EAAC,aAAa,EAAE,MAAM,EAAC,UAAU,GAAG,KAAK,CAAC,KAAK,GAAG,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC;QACrI,CAAC;IACL,CAAC;IACL,+BAAC;AAAD,CAAC,AAvBD,IAuBC;AAvBY,wBAAwB;IAbpC,gBAAS,CAAC;QACP,WAAW,EAAE,0DAA0D;QACvE,MAAM,EAAE,CAAC,0NASR,CAAC;KACL,CAAC;qCAOkC,uBAAU;GANjC,wBAAwB,CAuBpC;AAvBY,4DAAwB","sourcesContent":["import {Component,OnInit} from '@angular/core';\nimport {Car} from '../domain/car';\nimport {CarService} from '../service/carservice';\nimport {Message} from '../../../components/common/api';\n\n@Component({\n    templateUrl: 'showcase/demo/datascroller/datascrollerinfinitedemo.html',\n    styles: [`\n        .ui-grid-row > div {\n            padding: 4px 10px;\n            font-size: 20px;\n        }\n        \n        .ui-grid-row .ui-grid-row > div:last-child {\n            font-weight: bold;\n        }\n    `]\n})\nexport class DataScrollerInfiniteDemo {\n\n    cars: Car[];\n    \n    msgs: Message[] = [];\n    \n    constructor(private carService: CarService) { }\n    \n    loadData(event)Â {\n        //initialize\n        if(!this.cars) {\n            this.carService.getCarsSmall().then(cars => this.cars = cars);\n        }\n        //in real application, newArray should be loaded from a remote datasource\n        else {\n            let newArray = this.cars.slice(0);\n            for(let i = 0; i < newArray.length; i++) {\n                this.cars.push(newArray[i]);\n            }\n            this.msgs = [];\n            this.msgs.push({severity:'info', summary:'Data Loaded', detail:'Between ' + event.first + ' and ' + (event.first + event.rows)});\n        }        \n    }\n}"]}